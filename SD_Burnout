
rm(list = ls())

# This is code to replicate the analyses and figures from my 2020 
# analysis of semantic differential for burnout recognition. 
# Code developed by Alena Egorova (@alvegorova)

### DOWNLOAD LIBRARIES

install.packages(c("psych", "ggplot2"))
require(ggplot2)
require(dplyr)
require(tidyr)
require(psych) #for factor analysis
require(foreign) #to use "read.spss"


### DOWNLOAD DATA

setwd("~/Documents/Data_Analysis/Burnout_and_LOC")
dataset = read.spss("Data.sav", to.data.frame=TRUE)

### PREPARE DATA

#remove empty rows
dataset <- dataset[1:93,]

#make variable names more readable
dataset$male <- factor(dataset$male, labels = c('Male', 'Female'))
names(dataset)[names(dataset) == 'male'] <- 'Gender'
names(dataset)[names(dataset) == 'USK_Io'] <- 'LOC'
names(dataset)[names(dataset) == 'age'] <- 'Age'
names(dataset)[names(dataset) == 'nn'] <- 'Number'
names(dataset)[names(dataset) == 'stage_com'] <- 'Work_experience'
names(dataset)[names(dataset) == 'stage_sch'] <- 'Last_work_experience'
names(dataset)[names(dataset) == 'Em_exhaustion'] <- 'EE'
names(dataset)[names(dataset) == 'Depersonalization'] <- 'DP'
names(dataset)[names(dataset) == 'Successfulness'] <- 'PA'
names(dataset)[names(dataset) == 'stage_sch'] <- 'Last_work_experience'

#names(dataset)[names(dataset) == 'USK_Ip'] <- 'LOC_prof'
#names(dataset)[names(dataset) == 'Burnout_group'] <- 'Burnout_two_groups'
#names(dataset)[names(dataset) == 'Burnout_gr2'] <- 'Burnout_group'
#names(dataset)[names(dataset) == 'LO_gr_1_2'] <- 'LOC_groups'
#names(dataset)[names(dataset) == 'Eitimia'] <- 'Euthymia'
#names(dataset)[names(dataset) == 'Distimia'] <- 'Dysthymia'

#edit subject info
names(dataset)[names(dataset) == 'speciality1'] <- 'Subject'
dataset$Subject <- factor(dataset$Subject, labels = c('Math and engineering', 'Natural sciences', 'Humanities', 'Physical'))
levels(dataset$Subject) <- c(levels(dataset$Subject),'Elementary school','Not provided')
dataset$Subject[75] <- 'Humanities'
dataset$Subject[c(3,4,21,22,91)] <- 'Elementary school'
dataset$Subject[c(41,44,45,47,49,52,73,86)] <- 'Not provided'

#edit format of numeric variables
dataset$Number <- as.integer(dataset$Number)
dataset$LOC <- as.integer(dataset$LOC)
dataset$Age <- as.integer(dataset$Age)
dataset$Work_experience <- as.integer(dataset$Work_experience)
dataset$Last_work_experience <- as.integer(dataset$Last_work_experience)
dataset$EE <- as.integer(dataset$EE)
dataset$DP <- as.integer(dataset$DP)
dataset$PA <- as.integer(dataset$PA)

#Why this does not work?!:  
#dataset <- dataset %>% as.integer(N, LOC, LOC_prof,
#           Euthymia, Dysthymia, Depression, Anxiety,
#           EE, Depersonalization, PA, 
#           Burnout)

#keep table with sd
dataset_with_sd <- dataset

### SEMANTIC DIFFERENTIAL

#making SD varidables more readable
names(dataset)[names(dataset) == 'SD_St_Tyajeliy'] <- 'Student_Heavy'
#ADD_THE_REST!

dataset_with_sd_MB <- dataset_with_sd %>% 
  filter (Burnout_group=='Burnout_medium')

dataset_with_sd_MB_Ex <- dataset_with_sd_MB %>% 
  filter (LOC_groups=="External")

dataset_with_sd_MB_In <- dataset_with_sd_MB %>% 
  filter (LOC_groups=="Internal")

SD_col <- colnames(dataset_with_sd_MB) [colnames(dataset_with_sd_MB) %>% startsWith("SD_")]
dataset_with_sd_MB_piv <- pivot_longer(dataset_with_sd_MB, SD_col, names_to = c("Object","Scale"), 
                                       names_prefix = "SD_", names_sep = "_", values_to = "SD_value", values_drop_na =TRUE)

dataset_with_sd_MB_piv %>% 
  ggplot(aes(SD_value, fill=Object)) + 
  geom_density(alpha = 0.8, position = "identity") + 
  facet_grid(Scale~LOC_groups, shrink=TRUE)

dataset_with_sd_MB_piv %>% 
  ggplot(aes(SD_value, fill=Object)) + 
  geom_histogram(alpha = 0.8, position = "identity") + 
  facet_grid(Scale~LOC_groups, shrink=TRUE)


SD_St_cols <- colnames(dataset_with_sd_MB) [colnames(dataset_with_sd_MB) %>% startsWith("SD_St")]

# TODO create empty data frame

for(stcolname in SD_St_cols) {
  
  st <- (dataset_with_sd_MB_Ex  %>% select(!!as.name(stcolname)))
  
  scalename <- strsplit(stcolname, "_")[[1]][3]
  
  chcolname <- paste("SD_Ch_", scalename, sep="")
  ch <- (dataset_with_sd_MB_Ex  %>% select(!!as.name(chcolname)))
  
  res <- wilcox.test(st[,1], ch[,1] , mu=0, paired = TRUE, alternative = "two.sided", conf.int=TRUE)
  
  # TODO replace `print` with adding a row to the resulting data frame
  print(paste(scalename, (res)["p.value"], (res)["estimate"]))
} 

#Internal:
for(stcolname in SD_St_cols) {
  
  st <- (dataset_with_sd_MB_In  %>% select(!!as.name(stcolname)))
  
  scalename <- strsplit(stcolname, "_")[[1]][3]
  
  chcolname <- paste("SD_Ch_", scalename, sep="")
  ch <- (dataset_with_sd_MB_In  %>% select(!!as.name(chcolname)))
  
  res <- wilcox.test(st[,1], ch[,1] , mu=0, paired = TRUE, alternative = "two.sided", conf.int=TRUE)
  
  # TODO replace `print` with adding a row to the resulting data frame
  print(paste(scalename, (res)["p.value"], (res)["estimate"]))
}


student <- dataset (SD_St_Holodniy, SD_St_Molodoy, )
?wilcox.test(x, y, paired = TRUE, alternative = "two.sided")
